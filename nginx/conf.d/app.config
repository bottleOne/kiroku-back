# HTTP 포트 80 → HTTPS로 리디렉션
server {
    listen 80;
    server_name api.kirocu.store;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name api.kirocu.store;

    ##ssl인증서
    ssl_certificate /etc/ssl/certs/selfsigned.crt;
    ssl_certificate_key /etc/ssl/private/selfsigned.key;

    location / {
        # 기본 CORS 차단
        set $cors '';

        # localhost:3000만 허용
        if ($http_origin = "http://localhost:3000") {
            set $cors $http_origin;
        }

        # OPTIONS 요청 (preflight) 처리
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' $cors always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' 86400;
            
            #브라우저 공격 보안 헤더 추가
            add_header X-Content-Type-Options nosniff always;
            add_header X-Frame-Options SAMEORIGIN always;
            add_header X-XSS-Protection "1; mode=block" always;

            return 204;
        }

        # 실제 요청에도 CORS 허용 헤더 추가
        add_header 'Access-Control-Allow-Origin' $cors always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        proxy_pass http://spring:8090;
        proxy_set_header Host $host:$server_port;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}